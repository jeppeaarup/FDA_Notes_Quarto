# Installing packages

A package in R is a set of commands which are not a part of the base-set in R. Many of the R-commands which are used throughout this course requires a certain package to be installed on the computer/Mac. It is a good idea to get familiar with Installing packages and loading them onto your R-script mainly so you won't be missing them at the exercises, casework or examination.

In R there are two important commands concerning installation of packages.

* `install.packages()` installs the target package on your computer.
* `remove.packages()` uninstalls the package from your computer.

For example: `install.packages(’readxl’)` Installs the package `readxl` on the computer and \\`remove.packages(’readxl’)` uninstalls the package `readxl` from the computer. 

## Loading a package

When the packages are installed on the computer, you can load them onto your workspace/script at every occasion you initiate your analysis in R. To do this, you use the `library()` command. `library()` points at a package-library stored on your computer. Everytime you open a new session of R, you need to load the needed packages again. 


For example, `library(readxl)` Loads the package `readxl` onto the workspace.

When you load a package, you might get warning messages like the following:

[\> library(readxl)]{.code_text}  
[Advarselsbesked:  
pakke ‘readxl’ blev bygget under R version 3.1.3]{.code_text .red_text}

## Working directory

In R you are using something called a *working directory* or *wd* for short. This is the folder on your computer in which R saves and finds the projects that you are working on. This also makes it easier to load datasets. The working directory can be changed in R either manually or through code. `getwd()` and `setwd()` are the two important commands for changing the working directory.

**Show the current code directory**  
[\> getwd()  
[1] "/Users/madsbjorlie/Documents/Statistik/Exercises/Week 1"]{.code_text}  

**Change the working directory**  
[\> setwd("~/Documents/R-træning") 
\> getwd()
[1] "/Users/madsbjorlie/Documents/R-træning"]{.code_text}  

## Importing a dataset

Throughout this course you will need to import a lot of data into R. Getting familiar with the following packages and commands will help minimize your R-related frustration. Datasets can be imported into R in numerous ways. Like changing the working directory, it can be done both manually and through coding. We recommend doing it through coding since this makes it easier to maintain an overview.

Almost all of the datasets that will be handed out in this course will be in both the excel file-type `.xlsx`, as well as the `.RData` format. R is also capable of importing text-files such as `.txt` or `.csv`.

`.xlsx`-files are Microsoft Excel's standard project file type, whereas `.csv`-files are short for *comma separated values* and is a term for text-files where the values are separated by a comma (or in the Danish Excel, a semicolon).

You can either load `.RData` files, import datasets through R’s inherent commands or use some data-import packages to import file-types such as `.xlsx` or `.xls`. Both methods works fine and which one you will use depends on your personal preference.

### Importing an .RData file
If someone imported and stored the data as an `.RData` file, you can simply import it using the `load()` function. For this you do not need any libraries.

::: {.code_text}
load(file.choose())  
load("~/Documents/..../Beer GCMS.RData”)
:::

The only difference in comparison with the import-methods below, is that you do not "pipe" (the `<-` function) the object into something you name yourself. The data object will retain the name as it was saved with. However, if you like your objects to be named something special (like `X`), then simply just add a line below the `load()` where you define it: e.g., `X <- beer`. 

### Importing a dataset through R’s own commands
As a default, R can not import Excel-files such as `.xls` and `.xlsx`. To use R’s `read.csv()` function, you need to save the Excel dataset as a `.csv` file. This is done by choosing \textit{Save as} (in Excel) and then selecting the `.csv` file-type. This might seem a bit tedious, but it eliminates the demand for other packages. 

`read.csv()` imports the dataset specified in the parenthesis. This can be done in two ways: by typing the path to the file on your computer or by using the command `file.choose()` which corresponds to opening a new file. If the dataset is in the working directory, you do not have to type the full path, but just the file-name.  
For example:

:::{.code_text}
Beer <- read.csv(file.choose(), header=TRUE, sep=";", dec=",")  
Beer <- read.csv(”Beerdata.csv”, header=TRUE, sep=";", dec=",")  
Beer <- read.csv("~/Documents/R-traening/Øldata.csv”, header=TRUE, sep=";", dec=",")
::: 

The different arguments: `header =`, `sep =`, and `dec =` tells R how to import the data. 
`header=TRUE` tells R that the first row in the dataset is not a part of the data itself but carries the variable names. `sep=”;”` defines which separator the document uses. By using Danish Excel, this will always be semicolon. This can be checked by opening the dataset in NotePad on windows or TextEditor on Mac.
`dec=”,”` defines which symbol is used for decimals. It is necessary to make sure that the dataset in R is separated by a full stop rather than a comma. This can be checked by using summary commands after the data has been imported. 